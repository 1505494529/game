<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>疯狂Emoji转盘</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Luckiest+Guy&family=Nunito:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
    font-family: 'Nunito', sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background: linear-gradient(135deg, #6dd5ed, #2193b0);
    margin: 0;
    text-align: center;
    color: #333;
}

.container h1 {
    font-family: 'Luckiest Guy', cursive;
    font-size: 3.5em;
    color: #ff6347;
    text-shadow: 1px 1px 0px #fff, 
                 2px 2px 0px #444, 
                 3px 3px 0px rgba(255, 99, 71, 0.5);
    margin-bottom: 30px;
    letter-spacing: 2px;
}

.container {
    background-color: rgba(255, 255, 255, 0.9);
    padding: 25px 30px;
    border-radius: 15px;
    box-shadow: 0 5px 20px rgba(0,0,0,0.25);
    width: 95vw;
    max-width: 1200px;
}

.game-layout {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    gap: 30px;
}

.game-panel {
    /* Common styling for panels if any */
}

.game-panel-left {
    flex: 1;
    max-width: 280px;
    display: flex;
    flex-direction: column;
    gap: 20px;
    background-color: rgba(255, 255, 255, 0.7);
    padding: 20px;
    border-radius: 10px;
    box-shadow: inset 0 0 10px rgba(0,0,0,0.1);
}

.game-panel-right {
    flex: 3;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.controls div { /* Added for spacing radio buttons */
    margin-bottom: 10px;
}

.controls label {
    display: block;
    width: calc(100% - 16px);
    margin-bottom: 5px;
    font-weight: 700;
    color: #555;
}
.controls input[type="number"] {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-sizing: border-box;
}
.controls button {
    width: 100%;
    padding: 12px 15px;
    background-color: #ff6347;
    color: white;
    border: none;
    border-radius: 8px;
    font-family: 'Nunito', sans-serif;
    font-weight: 700;
    font-size: 1.1em;
    cursor: pointer;
    transition: background-color 0.2s ease, transform 0.1s ease;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

.controls button:hover {
    background-color: #e55337;
}
.controls button:active {
    transform: translateY(1px);
    box-shadow: 0 1px 2px rgba(0,0,0,0.2);
}

.simulation-mode-label {
    font-weight: 700;
    color: #555;
    margin-bottom: 8px;
    display: block;
}

.simulation-mode-options label {
    display: inline-block;
    margin-right: 15px;
    font-weight: normal;
    color: #444;
}
.simulation-mode-options input[type="radio"] {
    margin-right: 5px;
    vertical-align: middle;
}


.game-info {
    width: 100%;
    background-color: rgba(0,0,0, 0.05);
    padding: 15px;
    border-radius: 8px;
    box-sizing: border-box;
}
.game-info p {
    margin: 8px 0;
    font-size: 0.95em;
    color: #444;
    word-wrap: break-word;
    overflow-wrap: break-word;
    text-align: left;
}
.game-info span {
    font-weight: 700;
    color: #2193b0;
}

.circle-container {
    width: 400px;
    height: 400px;
    border: 3px dashed #ff6347;
    border-radius: 50%;
    position: relative;
    margin: 20px auto;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: rgba(255,255,255,0.4);
}

.emoji-player {
    font-size: 3em;
    position: absolute;
    transition: transform 0.3s ease-out, opacity 0.5s ease, left 0.5s ease-out, top 0.5s ease-out; /* Added left/top transition */
    width: 50px;
    height: 50px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.emoji-player.next-start {
    outline: 4px solid gold; /* Highlight for next starting player */
    outline-offset: 2px;
    /* border-radius on .emoji-player itself should handle the shape */
}


.emoji-player.selected {
    transform: scale(1.5);
    text-shadow: 0 0 10px gold, 0 0 20px orange;
}

.emoji-player.eliminated {
    opacity: 0.3;
    text-decoration: line-through;
}

.status-message {
    margin-top: 25px;
    font-weight: 700;
    color: #D32F2F;
    min-height: 1.5em;
    width: 100%;
    text-align: center;
    font-size: 1.1em;
    padding: 10px;
    background-color: rgba(255,255,255,0.6);
    border-radius: 8px;
}

/* New Animations */
.emoji-player.hit-effect {
    animation: shakeAndFlash 0.4s ease-in-out;
}

@keyframes shakeAndFlash {
    0%, 100% { transform: translateX(0) scale(1.5); filter: brightness(1.5); }
    25% { transform: translateX(-6px) rotate(-5deg) scale(1.5); filter: brightness(1); }
    50% { transform: translateX(6px) rotate(5deg) scale(1.5); filter: brightness(2); }
    75% { transform: translateX(-4px) rotate(-3deg) scale(1.5); filter: brightness(1); }
}

.emoji-player.fly-out {
    animation: flyOutAnimation 1s forwards ease-in;
    transform-origin: center center;
}

@keyframes flyOutAnimation {
    0% {
        transform: rotateZ(0deg) scale(1.3);
        opacity: 1;
    }
    50% {
        transform: translate(calc(var(--flyout-x, 200px) / 2), calc(var(--flyout-y, -250px) - 75px)) rotateZ(720deg) scale(0.7);
        opacity: 0.8;
    }
    100% {
        transform: translate(var(--flyout-x, 200px), var(--flyout-y, -250px)) rotateZ(1440deg) scale(0.1);
        opacity: 0;
    }
}

.emoji-player.wiggle-error {
    animation: wiggleErrorAnimation 0.5s ease-in-out;
}

@keyframes wiggleErrorAnimation {
    0%, 100% { transform: translateX(0) scale(1); }
    20%, 60% { transform: translateX(-8px) rotate(-5deg) scale(1.1); }
    40%, 80% { transform: translateX(8px) rotate(5deg) scale(1.1); }
}

.giant-pistol {
    font-size: 6em;
    position: absolute;
    left: -100px;
    top: 50%;
    transform: translateY(-50%) scaleX(-1);
    transform-origin: center center;
    visibility: hidden;
    z-index: 200;
    transition: transform 0.5s ease-out, left 0.5s ease-out, top 0.5s ease-out, opacity 0.3s;
    text-shadow: 2px 2px 5px rgba(0,0,0,0.5);
}

.giant-pistol.visible {
    visibility: visible;
}

.bullet-emoji {
    font-size: 2em;
    position: absolute;
    visibility: hidden;
    z-index: 190;
    color: orangeRed;
    text-shadow: 0 0 5px black;
    transition: transform 0.2s linear, opacity 0.1s linear;
}

.bullet-emoji.visible {
    visibility: visible;
}

.emoji-player.shivering {
    animation: shiverAnimation 0.1s infinite linear;
    transform: scale(1.6) !important;
}

@keyframes shiverAnimation {
    0% { transform: translate(0px, 0px) rotate(-1deg) scale(1.6); }
    25% { transform: translate(-2px, 2px) rotate(0deg) scale(1.6); }
    50% { transform: translate(2px, -2px) rotate(1deg) scale(1.6); }
    75% { transform: translate(-2px, -2px) rotate(0deg) scale(1.6); }
    100% { transform: translate(2px, 2px) rotate(-1deg) scale(1.6); }
}

.smoke-puff {
    position: absolute;
    width: 20px;
    height: 20px;
    background-color: rgba(128, 128, 128, 0.6);
    border-radius: 50%;
    opacity: 0.7;
    pointer-events: none;
    z-index: 180;
    animation: smokePuffAnim 0.8s ease-out forwards;
    transform-origin: center center;
}

@keyframes smokePuffAnim {
    0% {
        transform: scale(0.5);
        opacity: 0.7;
    }
    100% {
        transform: scale(2.5) translateY(-20px);
        opacity: 0;
    }
}

.speech-bubble {
    background: #fff;
    border-radius: 10px;
    padding: 10px 15px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    border: 2px solid #777;
    color: #333;
    min-width: 100px;
    max-width: 200px;
    text-align: center;
    z-index: 300;
    transition: opacity 0.3s ease-out, transform 0.3s ease-out;
    transform: scale(0.8);
    opacity: 0;
}

.speech-bubble.visible {
    transform: scale(1);
    opacity: 1;
    visibility: visible !important;
}

.speech-bubble::after {
    content: '';
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 10px solid transparent;
    border-right: 10px solid transparent;
    border-top: 10px solid #777;
}

.speech-bubble.point-up::after {
    bottom: auto;
    top: -10px;
    border-top: none;
    border-bottom: 10px solid #777;
}

.speech-bubble p.speech-bubble-text {
    margin: 0;
    font-size: 0.9em;
}

@media (max-width: 860px) {
    .game-layout {
        flex-direction: column;
        align-items: center;
    }
    .game-panel-left,
    .game-panel-right {
        max-width: 95%;
        width: 100%;
        align-items: center;
        margin-bottom: 20px;
    }
    .game-panel-left {
        max-width: 500px;
    }
    .circle-container {
        width: 350px;
        height: 350px;
    }
    .emoji-player {
        font-size: 2.8em;
    }
}

@media (max-width: 480px) {
    .container h1 {
        font-size: 2.8em;
    }
    .circle-container {
        width: 300px;
        height: 300px;
    }
    .emoji-player {
        font-size: 2.5em;
    }
    .game-panel-left {
        padding: 15px;
    }
}

.eliminated-player-placeholder {
    position: absolute;
    width: 45px; 
    height: 45px;
    background-color: rgba(100, 100, 100, 0.25);
    border-radius: 50%;
    z-index: 10; 
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 1.8em; 
    color: rgba(50,50,50,0.6);
    transition: opacity 0.5s ease; /* For smooth appearance/disappearance */
}

.circle-container.no-border {
    border: none;
}

.formula-display-panel {
    width: 100%;
    max-width: 450px; /* Or adjust as needed */
    margin: 20px auto;
    padding: 20px;
    background-color: rgba(255, 255, 255, 0.85);
    border-radius: 10px;
    box-shadow: 0 3px 10px rgba(0,0,0,0.15);
    text-align: left;
    font-family: 'Courier New', Courier, monospace; /* Good for code-like display */
    display: none; /* Hidden by default */
    line-height: 1.6;
    font-size: 0.95em;
    color: #333;
}
.formula-display-panel h3 {
    font-family: 'Nunito', sans-serif;
    text-align: center;
    color: #2193b0;
    margin-top: 0;
    margin-bottom: 15px;
    border-bottom: 1px solid #ddd;
    padding-bottom: 10px;
}
.formula-display-panel p {
    margin: 8px 0;
}
.formula-display-panel .formula-step {
    padding: 5px;
    border-bottom: 1px dashed #eee;
}
.formula-display-panel .formula-step:last-child {
    border-bottom: none;
}
.formula-display-panel .formula-highlight {
    font-weight: bold;
    color: #ff6347;
}
    </style>
</head>
<body>
    <div class="container">
        <h1>约瑟夫环</h1>

        <div class="game-layout">
            <div class="game-panel game-panel-left">
                <div class="controls">
                    <div>
                        <label for="n_value">每数到第 N 个:</label>
                        <input type="number" id="n_value" value="3" min="1">
                    </div>
                    <div>
                        <span class="simulation-mode-label">模拟方式:</span>
                        <div class="simulation-mode-options">
                            <label><input type="radio" name="simulation_mode" value="array" checked> 数组模拟</label>
                            <label><input type="radio" name="simulation_mode" value="linkedlist"> 链表模拟</label>
                            <label><input type="radio" name="simulation_mode" value="formula"> 公式法</label>
                        </div>
                    </div>
                    <button id="start_button">开始游戏 / 下一轮</button>
                </div>
        
                <div class="game-info">
                    <p>轮次: <span id="round_count">0</span></p>
                    <p>当前 N 值: <span id="current_n_value">3</span></p>
                    <p>"幸运儿": <span id="selected_emoji">---</span></p>
                    <p>下次开始: <span id="next_start_player_info">---</span></p>
                </div>
            </div>

            <div class="game-panel game-panel-right">
                <div class="circle-container">
                    <!-- Emojis will be added here by JavaScript -->
                </div>
                <div id="formula_display_panel" class="formula-display-panel">
                    <!-- Formula calculation steps will be shown here -->
                </div>
        
                <div class="status-message">
                    <p id="game_status_message"></p>
                </div>
            </div>
        </div>

        <div id="giant_pistol_emoji" class="giant-pistol">🔫</div>
        <div id="bullet_emoji" class="bullet-emoji">💥</div>
        
        <div id="speech_bubble_template" class="speech-bubble" style="visibility: hidden; position: absolute;">
            <p class="speech-bubble-text">Error!</p>
        </div>

    </div>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
    const initialEmojis = ['😀', '😂', '🥳', '🤯', '😎', '🤑', '😱', '😈', '👻', '😊', '🤖', '👾'];
    let players = []; // Array of player objects { id, emoji, currentVisualEmoji, element, isEliminated, originalIndex }
    let currentPlayerIndex = 0; // Index in the conceptual circle of active players
    let roundCount = 0;
    let gameNValue = 3;
    let gameStarted = false;
    let targetPlayerForSelection = null;
    let awaitingPlayerClick = false;
    let simulationMode = 'array'; // 'array', 'linkedlist', or 'formula'

    const nValueInput = document.getElementById('n_value');
    const startButton = document.getElementById('start_button');
    const circleContainer = document.querySelector('.circle-container');
    const roundCountDisplay = document.getElementById('round_count');
    const currentNValueDisplay = document.getElementById('current_n_value');
    const selectedEmojiDisplay = document.getElementById('selected_emoji');
    const gameStatusMessageDisplay = document.getElementById('game_status_message');
    const nextStartPlayerInfoDisplay = document.getElementById('next_start_player_info');
    const simulationModeRadios = document.querySelectorAll('input[name="simulation_mode"]');
    
    const giantPistolElement = document.getElementById('giant_pistol_emoji');
    const bulletElement = document.getElementById('bullet_emoji');
    const speechBubbleTemplate = document.getElementById('speech_bubble_template');
    const formulaDisplayPanel = document.getElementById('formula_display_panel'); // Added
    let activeSpeechBubble = null;

    // Josephus problem formula (0-indexed result)
    function calculateJosephusWinner(numPlayers, k) {
        if (numPlayers <= 0) return -1;
        if (k <= 0) k = 1; // k must be positive for the formula's usual interpretation
        let survivorIndex = 0;
        for (let i = 1; i <= numPlayers; i++) {
            survivorIndex = (survivorIndex + k) % i;
        }
        return survivorIndex;
    }

    async function executeFormulaCalculation() {
        gameNValue = parseInt(nValueInput.value) || 3;
        currentNValueDisplay.textContent = gameNValue;
        const numPlayers = initialEmojis.length; // Total number of players
        formulaDisplayPanel.innerHTML = ''; // Clear previous steps

        if (numPlayers === 0) {
            gameStatusMessageDisplay.textContent = '没有玩家可以计算!';
            formulaDisplayPanel.innerHTML = '<p style="color:red;">没有玩家!</p>';
            return;
        }
        if (gameNValue <= 0) {
            gameStatusMessageDisplay.textContent = 'N值必须大于0!';
            formulaDisplayPanel.innerHTML = '<p style="color:red;">N值必须大于0!</p>';
            if(!nValueInput.classList.contains('wiggle-error')) {
                nValueInput.classList.add('wiggle-error');
                setTimeout(() => nValueInput.classList.remove('wiggle-error'), 500);
            }
            return;
        }

        let calculationHTML = `<h3>公式计算步骤 (N=${gameNValue})</h3>`;
        calculationHTML += `<p>总人数: ${numPlayers}</p>`;
        calculationHTML += `<p>公式: f(i, k) = (f(i-1, k) + k) % i</p>`;
        calculationHTML += `<p>其中 f(1, k) = 0 (0-indexed)</p><hr>`;

        let survivorIndex = 0; // f(0, k) can be considered 0 for the loop starting at i=1
        for (let i = 1; i <= numPlayers; i++) {
            const prevSurvivorIndex = survivorIndex;
            survivorIndex = (survivorIndex + gameNValue) % i;
            calculationHTML += `<div class="formula-step">f(${i}, ${gameNValue}) = (f(${i-1}, ${gameNValue}) + ${gameNValue}) % ${i} = (${prevSurvivorIndex} + ${gameNValue}) % ${i} = <span class="formula-highlight">${survivorIndex}</span></div>`;
        }
        
        const winnerPlayer = players[survivorIndex]; // players array should be up-to-date

        if (winnerPlayer) {
            calculationHTML += `<hr><p>最终幸存者索引 (0-indexed): <span class="formula-highlight">${survivorIndex}</span></p>`;
            calculationHTML += `<p>对应 Emoji: <span class="formula-highlight" style="font-size: 1.5em;">${winnerPlayer.emoji}</span></p>`;
            formulaDisplayPanel.innerHTML = calculationHTML;

            gameStatusMessageDisplay.textContent = `公式计算结果: 胜利者是 ${winnerPlayer.emoji}`;
            selectedEmojiDisplay.textContent = winnerPlayer.emoji;
            roundCountDisplay.textContent = "1";
            endGame(winnerPlayer, true);
        } else {
            formulaDisplayPanel.innerHTML = '<p style="color:red;">公式计算出错!</p>';
            gameStatusMessageDisplay.textContent = '公式计算出错!';
            startButton.disabled = false;
        }
    }

    function tick() {
        return new Promise(resolve => requestAnimationFrame(resolve));
    }

    function initializeGame() {
        gameNValue = parseInt(nValueInput.value) || 3;
        currentNValueDisplay.textContent = gameNValue;
        simulationMode = document.querySelector('input[name="simulation_mode"]:checked').value;

        players = initialEmojis.map((emoji, index) => ({
            id: index,
            emoji: emoji,
            currentVisualEmoji: emoji,
            element: null,
            isEliminated: false,
            originalIndex: index
        }));
        currentPlayerIndex = 0;
        roundCount = 0;
        updateRoundDisplay();
        selectedEmojiDisplay.textContent = '---';
        nextStartPlayerInfoDisplay.textContent = '---';
        awaitingPlayerClick = false;
        targetPlayerForSelection = null;
        startButton.disabled = false;
        giantPistolElement.classList.remove('visible');
        bulletElement.classList.remove('visible');
        if (activeSpeechBubble) { activeSpeechBubble.remove(); activeSpeechBubble = null; }
        clearPlaceholders();
        circleContainer.classList.remove('no-border');
        formulaDisplayPanel.style.display = 'none'; // Hide formula panel by default
        circleContainer.style.display = 'flex'; // Show circle by default

        if (simulationMode === 'formula') {
            gameStatusMessageDisplay.textContent = '输入N值, 点击 "计算获胜者"';
            startButton.textContent = '计算获胜者';
            gameStarted = false;
            circleContainer.style.display = 'none'; // Hide circle for formula
            formulaDisplayPanel.style.display = 'block'; // Show formula panel
            formulaDisplayPanel.innerHTML = '<h3>公式计算步骤</h3><p>请点击 "计算获胜者" 来查看步骤。</p>'; // Initial message
            renderPlayers(); // Still call to ensure players array is populated for formula use
        } else { // Array or LinkedList
            gameStatusMessageDisplay.textContent = '设置N值和模式, 点击开始游戏!';
            startButton.textContent = '开始游戏';
            gameStarted = false;
            renderPlayers();
            updateNextStartPlayerVisual();
        }
         // Ensure no highlight if switching to formula or before game starts
        if (simulationMode === 'formula' || !gameStarted) {
            players.forEach(p => p.element?.classList.remove('next-start'));
            nextStartPlayerInfoDisplay.textContent = '---';
        }
    }

    function clearPlaceholders() {
        const placeholders = circleContainer.querySelectorAll('.eliminated-player-placeholder');
        placeholders.forEach(p => p.remove());
    }

    function renderPlayers() {
        const existingPlayerElements = circleContainer.querySelectorAll('.emoji-player');
        existingPlayerElements.forEach(el => el.remove());
        
        // In array mode, placeholders are managed separately and persist until a new game
        if (simulationMode === 'array') {
            // Placeholders are added in animateDetailedElimination and cleared on new game
        } else { // linkedlist mode
            clearPlaceholders(); // Remove any placeholders if switching from array mode
        }

        const radius = circleContainer.offsetWidth / 2 - 30;
        const activePlayers = players.filter(p => !p.isEliminated);
        const numToDisplay = simulationMode === 'array' ? players.length : activePlayers.length;

        let displayIndex = 0;
        players.forEach((player, pArrIndex) => {
            let angle, x, y;

            if (simulationMode === 'array') {
                // Use originalIndex for consistent positioning in array mode
                angle = (player.originalIndex / players.length) * 2 * Math.PI - (Math.PI / 2);
                x = radius * Math.cos(angle) + (circleContainer.offsetWidth / 2);
                y = radius * Math.sin(angle) + (circleContainer.offsetHeight / 2);

                if (player.isEliminated) {
                    if (!circleContainer.querySelector(`.placeholder-id-${player.id}`)) { // Avoid duplicate placeholders
                        const placeholderDiv = document.createElement('div');
                        placeholderDiv.classList.add('eliminated-player-placeholder');
                        placeholderDiv.classList.add(`placeholder-id-${player.id}`); // For tracking
                        placeholderDiv.textContent = '💀';
                        placeholderDiv.style.left = `${x - 22.5}px`;
                        placeholderDiv.style.top = `${y - 22.5}px`;
                        circleContainer.appendChild(placeholderDiv);
                    }
                    player.element = null; // No active element for eliminated player
                    return; // Skip creating emoji-player div for eliminated ones in array mode
                }
            } else { // linkedlist mode
                circleContainer.classList.remove('no-border'); // Ensure border for linked list mode
                if (player.isEliminated) {
                    player.element = null;
                    return; // Don't render eliminated players
                }
                angle = (displayIndex / activePlayers.length) * 2 * Math.PI - (Math.PI / 2);
                x = radius * Math.cos(angle) + (circleContainer.offsetWidth / 2);
                y = radius * Math.sin(angle) + (circleContainer.offsetHeight / 2);
                displayIndex++;
            }
            
            // Create/update element for non-eliminated players
            const playerDiv = document.createElement('div');
            playerDiv.classList.add('emoji-player');
            playerDiv.textContent = player.currentVisualEmoji;
            playerDiv.style.left = `${x - 25}px`;
            playerDiv.style.top = `${y - 25}px`;
            player.element = playerDiv;

            playerDiv.classList.remove('selected', 'hit-effect', 'fly-out', 'wiggle-error', 'shivering');

            if (awaitingPlayerClick) {
                playerDiv.style.cursor = 'pointer';
                playerDiv.addEventListener('click', () => handlePlayerClick(player), { once: true });
            } else {
                playerDiv.style.cursor = 'default';
            }
            circleContainer.appendChild(playerDiv);
        });
        updateNextStartPlayerVisual();
    }
    
    function updateNextStartPlayerVisual() {
        players.forEach(p => p.element?.classList.remove('next-start'));
        if (!gameStarted) return; // Highlight should be visible even when awaiting click

        const activePlayers = players.filter(p => !p.isEliminated);
        if (activePlayers.length === 0) {
            nextStartPlayerInfoDisplay.textContent = '---';
            return;
        }
        
        // currentPlayerIndex is the index within activePlayers
        const actualNextPlayer = activePlayers[currentPlayerIndex % activePlayers.length];
        if (actualNextPlayer && actualNextPlayer.element) {
            actualNextPlayer.element.classList.add('next-start');
            nextStartPlayerInfoDisplay.textContent = actualNextPlayer.emoji;
        } else {
            nextStartPlayerInfoDisplay.textContent = '---';
        }
    }


    function updateRoundDisplay() {
        roundCountDisplay.textContent = roundCount;
    }

    function startSelectionPhase() {
        if (!gameStarted || awaitingPlayerClick) return;
        if (giantPistolElement.classList.contains('visible')) return;

        gameNValue = parseInt(nValueInput.value) || 3;
        currentNValueDisplay.textContent = gameNValue;
        simulationMode = document.querySelector('input[name="simulation_mode"]:checked').value;

        if (simulationMode === 'formula') {
            // Formula mode doesn't use selection phase
            executeFormulaCalculation();
            return;
        }

        const activePlayers = players.filter(p => !p.isEliminated);
        if (activePlayers.length <= 1) {
            endGame(activePlayers.length > 0 ? activePlayers[0] : null);
            return;
        }

        roundCount++;
        updateRoundDisplay();
        
        // Reset visual states for all active players
        activePlayers.forEach(p => {
            if (p.element) {
                p.element.classList.remove('selected', 'wiggle-error', 'shivering');
                p.currentVisualEmoji = p.emoji; // Reset to original emoji
                p.element.textContent = p.currentVisualEmoji;
            }
        });
        
        // currentPlayerIndex is already the index *within activePlayers* from the previous round
        // or 0 if it's the first round / reset.
        const startingPlayerInActive = activePlayers[currentPlayerIndex % activePlayers.length];
        if (!startingPlayerInActive) { // Should not happen if activePlayers.length > 0
            console.error("Error: No starting player found.");
            endGame(null); return;
        }

        let stepsToTake = gameNValue;
        let currentSearchIndexInActive = currentPlayerIndex % activePlayers.length;
        
        for (let i = 1; i < stepsToTake; i++) { // Count N-1 steps forward from starting player
            currentSearchIndexInActive = (currentSearchIndexInActive + 1) % activePlayers.length;
        }
        targetPlayerForSelection = activePlayers[currentSearchIndexInActive];

        awaitingPlayerClick = true;
        selectedEmojiDisplay.innerHTML = `从 <strong style="color:blue;">${startingPlayerInActive.emoji}</strong> 开始数 ${gameNValue} 个.`;
        gameStatusMessageDisplay.textContent = '请点击你认为会被选中的 Emoji!';
        startButton.disabled = true;
        startButton.textContent = '等待选择...';
        renderPlayers(); // Re-render to apply click handlers and 'next-start'
    }

    function showSpeechBubble(targetElement, message) {
        if (activeSpeechBubble) activeSpeechBubble.remove();
        activeSpeechBubble = speechBubbleTemplate.cloneNode(true);
        activeSpeechBubble.removeAttribute('id');
        activeSpeechBubble.querySelector('.speech-bubble-text').textContent = message;
        document.body.appendChild(activeSpeechBubble);
        const targetRect = targetElement.getBoundingClientRect();
        const bubbleRect = activeSpeechBubble.getBoundingClientRect();
        let top = targetRect.top - bubbleRect.height - 15;
        let left = targetRect.left + (targetRect.width / 2) - (bubbleRect.width / 2);
        if (left < 0) left = 5;
        if (left + bubbleRect.width > window.innerWidth) left = window.innerWidth - bubbleRect.width - 5;
        if (top < 0) {
            top = targetRect.bottom + 15;
            activeSpeechBubble.classList.add('point-up');
        } else {
            activeSpeechBubble.classList.remove('point-up');
        }
        activeSpeechBubble.style.top = `${top + window.scrollY}px`;
        activeSpeechBubble.style.left = `${left + window.scrollX}px`;
        activeSpeechBubble.style.visibility = 'visible';
        requestAnimationFrame(() => activeSpeechBubble.classList.add('visible'));
        setTimeout(() => {
            if (activeSpeechBubble) {
                activeSpeechBubble.classList.remove('visible');
                setTimeout(() => { if (activeSpeechBubble) activeSpeechBubble.remove(); activeSpeechBubble = null; }, 300);
            }
        }, 3000);
    }

    async function handlePlayerClick(clickedPlayer) {
        if (!awaitingPlayerClick || clickedPlayer.isEliminated || !clickedPlayer.element) return;

        if (clickedPlayer === targetPlayerForSelection) {
            awaitingPlayerClick = false;
            startButton.disabled = true;
            
            players.forEach(p => p.element?.classList.remove('selected', 'next-start'));
            clickedPlayer.element.classList.add('selected');

            await animateDetailedElimination(clickedPlayer); // Animation handles visual removal/placeholder

            clickedPlayer.isEliminated = true;
            // Element is handled by animation/renderPlayers

            const activePlayers = players.filter(p => !p.isEliminated);
            if (activePlayers.length <= 1) {
                endGame(activePlayers.length > 0 ? activePlayers[0] : null);
                return;
            }

            // Determine next currentPlayerIndex (index within the new set of active players)
            // The player *after* the eliminated one becomes the new starting point.
            let indexOfEliminatedInOriginal = players.indexOf(clickedPlayer);
            let nextPotentialStartIndexOriginal = (indexOfEliminatedInOriginal + 1) % players.length;
            
            // Find this player in the *new* activePlayers list
            let foundNextActiveStart = false;
            for(let i = 0; i < activePlayers.length; i++) {
                let currentOriginalSearch = nextPotentialStartIndexOriginal;
                for (let j=0; j < players.length; j++) { // Iterate max players.length times to find next active
                    const playerAtOriginalSearch = players[currentOriginalSearch % players.length];
                    if (!playerAtOriginalSearch.isEliminated) {
                        if (activePlayers.indexOf(playerAtOriginalSearch) !== -1) {
                             currentPlayerIndex = activePlayers.indexOf(playerAtOriginalSearch);
                             foundNextActiveStart = true;
                             break;
                        }
                    }
                    currentOriginalSearch++;
                }
                if (foundNextActiveStart) break;
            }

            if (!foundNextActiveStart && activePlayers.length > 0) { // Fallback if logic fails
                currentPlayerIndex = 0;
            }
            
            targetPlayerForSelection = null;
            selectedEmojiDisplay.textContent = `${clickedPlayer.currentVisualEmoji} 已出局!`;
            gameStatusMessageDisplay.textContent = '准备下一轮选择...';
            
            // Render before timeout to show changes immediately for linkedlist
            if (simulationMode === 'linkedlist') renderPlayers(); 
            updateNextStartPlayerVisual();

            setTimeout(() => {
                if(gameStarted) startSelectionPhase();
            }, simulationMode === 'linkedlist' ? 500 : 1500); // Shorter delay for linkedlist as re-render is quick

        } else {
            const originalEmoji = clickedPlayer.emoji;
            clickedPlayer.currentVisualEmoji = '😡';
            if(clickedPlayer.element) clickedPlayer.element.textContent = clickedPlayer.currentVisualEmoji;
            showSpeechBubble(clickedPlayer.element, `点错了! 还不该轮到我!`);
            gameStatusMessageDisplay.textContent = '请从指定的起始Emoji再数一次!';
            if (clickedPlayer.element) {
                clickedPlayer.element.classList.add('wiggle-error');
                setTimeout(() => {
                    if (clickedPlayer.element) {
                        clickedPlayer.element.classList.remove('wiggle-error');
                        clickedPlayer.currentVisualEmoji = originalEmoji;
                        clickedPlayer.element.textContent = originalEmoji;
                    }
                }, 2800);
            }
        }
    }

    async function animateDetailedElimination(player) {
        const victimElement = player.element;
        if (!victimElement) return;

        const victimOriginalStyle = { left: victimElement.style.left, top: victimElement.style.top };

        startButton.disabled = true;
        gameStatusMessageDisplay.textContent = '正在淘汰中...';
        selectedEmojiDisplay.textContent = ' ';
        await tick();

        const playerRect = victimElement.getBoundingClientRect();
        let pistolActualWidth = giantPistolElement.offsetWidth || 96;
        const targetPistolVisualRight_viewport = playerRect.left - 50;
        const targetPistolStyleLeft_viewport = targetPistolVisualRight_viewport - pistolActualWidth;
        const targetPistolCenterY_viewport = playerRect.top + playerRect.height / 2;

        giantPistolElement.style.top = `${targetPistolCenterY_viewport}px`;
        giantPistolElement.style.left = `${targetPistolStyleLeft_viewport}px`;
        giantPistolElement.style.transform = 'translateY(-50%) scaleX(-1) rotate(0deg)';
        giantPistolElement.classList.add('visible');
        victimElement.classList.add('shivering', 'selected');
        await new Promise(resolve => setTimeout(resolve, 1000));
        victimElement.classList.remove('shivering');

        giantPistolElement.style.transform = 'translateY(-50%) scaleX(-1) translateX(20px) rotate(5deg)';
        await new Promise(resolve => setTimeout(resolve, 120));
        giantPistolElement.style.transform = 'translateY(-50%) scaleX(-1) translateX(0px) rotate(0deg)';
        
        bulletElement.style.top = `${playerRect.top + playerRect.height / 2 - bulletElement.offsetHeight / 2}px`;
        bulletElement.style.left = `${playerRect.left - bulletElement.offsetWidth - 5}px`;
        bulletElement.classList.add('visible');
        
        const victimTargetCenterX_viewport = playerRect.left + playerRect.width / 2;
        const victimTargetCenterY_viewport = playerRect.top + playerRect.height / 2;
        const bulletCurrentLeft_viewport = parseFloat(bulletElement.style.left);
        const bulletCurrentTop_viewport = parseFloat(bulletElement.style.top);
        const translateX = victimTargetCenterX_viewport - bulletCurrentLeft_viewport - (bulletElement.offsetWidth / 2);
        const translateY = victimTargetCenterY_viewport - bulletCurrentTop_viewport - (bulletElement.offsetHeight / 2);
        bulletElement.style.transform = `translate(${translateX}px, ${translateY}px)`;
        await new Promise(resolve => setTimeout(resolve, 200));
        bulletElement.classList.remove('visible');
        bulletElement.style.transform = 'translate(0,0)';

        player.currentVisualEmoji = '😫';
        victimElement.textContent = player.currentVisualEmoji;
        victimElement.classList.add('hit-effect');
        await new Promise(resolve => setTimeout(resolve, 400));
        victimElement.classList.remove('hit-effect');

        if (simulationMode === 'linkedlist') {
            const flyX = (Math.random() - 0.5) * 2 * 250;
            const flyY = -200 - Math.random() * 150;
            victimElement.style.setProperty('--flyout-x', `${flyX}px`);
            victimElement.style.setProperty('--flyout-y', `${flyY}px`);
            victimElement.classList.add('fly-out');

            const smokeInterval = 80;
            const flyOutDuration = 1000;
            let smokeTimer = 0;
            const smokePuffParent = circleContainer;
            const smokeIntervalId = setInterval(() => {
                if (smokeTimer >= flyOutDuration) { clearInterval(smokeIntervalId); return; }
                const puff = document.createElement('div');
                puff.classList.add('smoke-puff');
                const victimRectNow = victimElement.getBoundingClientRect();
                const parentRect = smokePuffParent.getBoundingClientRect();
                let puffLeft = victimRectNow.left + (victimRectNow.width / 2) - 10 - parentRect.left;
                let puffTop = victimRectNow.top + (victimRectNow.height / 2) - 10 - parentRect.top;
                puff.style.left = `${puffLeft}px`; puff.style.top = `${puffTop}px`;
                smokePuffParent.appendChild(puff);
                setTimeout(() => { puff.remove(); }, 800);
                smokeTimer += smokeInterval;
            }, smokeInterval);
            
            await new Promise(resolve => setTimeout(resolve, flyOutDuration));
            
            victimElement.style.visibility = 'hidden'; // Hide it before potential removal
            victimElement.remove(); // Remove the element after animation
            player.element = null; // Clear reference
        } else { // Array mode
            await new Promise(resolve => setTimeout(resolve, 100)); // Short delay for hit effect to be visible
            victimElement.style.visibility = 'hidden';
            victimElement.remove();
            player.element = null;
        }

        giantPistolElement.classList.remove('visible');
        giantPistolElement.style.left = '-150px';
        giantPistolElement.style.transform = 'translateY(-50%) scaleX(-1) rotate(0deg)';

        if (simulationMode === 'array') {
            // Check if placeholder already exists for this player ID to prevent duplicates
            if (!circleContainer.querySelector(`.placeholder-id-${player.id}`)) {
                const placeholderDiv = document.createElement('div');
                placeholderDiv.classList.add('eliminated-player-placeholder');
                placeholderDiv.classList.add(`placeholder-id-${player.id}`); // Add ID for tracking
                placeholderDiv.textContent = '💀'; // Corpse emoji
                placeholderDiv.style.left = victimOriginalStyle.left;
                placeholderDiv.style.top = victimOriginalStyle.top;
                circleContainer.appendChild(placeholderDiv); // Add to main container
            }
        }
        // For linkedlist, renderPlayers() will be called in handlePlayerClick to readjust
    }

    function endGame(winner, isFormulaMode = false) {
        awaitingPlayerClick = false;
        // gameStarted is set to false at the end
        giantPistolElement.classList.remove('visible');
        bulletElement.classList.remove('visible');
        
        if (!isFormulaMode) {
            clearPlaceholders();
        }

        if (winner) {
            gameStatusMessageDisplay.textContent = `游戏结束! 胜利者是: ${winner.emoji}`;
            selectedEmojiDisplay.textContent = winner.emoji;
            nextStartPlayerInfoDisplay.textContent = winner.emoji;

            players.forEach(p => {
                p.isEliminated = (p !== winner);
                p.currentVisualEmoji = p.emoji;
            });
            renderPlayers();

            if (winner.element) {
                 winner.element.classList.add('selected');
                 winner.element.classList.remove('next-start');
            }
        } else {
            gameStatusMessageDisplay.textContent = '游戏结束! 没有胜利者。';
            renderPlayers(); // Clear board
            selectedEmojiDisplay.textContent = '---';
            nextStartPlayerInfoDisplay.textContent = '---';
        }

        startButton.disabled = false;
        if (isFormulaMode) {
            startButton.textContent = '重新计算';
        } else {
            startButton.textContent = '重新开始';
        }
        gameStarted = false; // Game session ends for all modes here
        targetPlayerForSelection = null;
    }

    startButton.addEventListener('click', () => {
        simulationMode = document.querySelector('input[name="simulation_mode"]:checked').value;

        if (simulationMode === 'formula') {
            executeFormulaCalculation();
        } else { // Array or LinkedList
            if (!gameStarted) {
                // initializeGame() was called by mode change or initial load.
                // This click transitions from "Start Game" to "Start Selection" state.
                gameStarted = true;
                startButton.textContent = '开始选择';
                // Fall through to startSelectionPhase if conditions met
            }

            if (gameStarted && !awaitingPlayerClick && !giantPistolElement.classList.contains('visible')) {
                 startSelectionPhase();
            }
        }
    });

    nValueInput.addEventListener('change', () => {
        const newNValue = parseInt(nValueInput.value);
        if (newNValue <= 0) {
            gameStatusMessageDisplay.textContent = "N值必须大于0!";
            nValueInput.value = gameNValue; // Revert
            if(!nValueInput.classList.contains('wiggle-error')) {
                nValueInput.classList.add('wiggle-error');
                setTimeout(() => nValueInput.classList.remove('wiggle-error'), 500);
            }
            return;
        }
        gameNValue = newNValue;
        currentNValueDisplay.textContent = gameNValue;
        simulationMode = document.querySelector('input[name="simulation_mode"]:checked').value;


        if (simulationMode === 'formula') {
            gameStatusMessageDisplay.textContent = `N值已更新为 ${gameNValue}. 点击 "计算获胜者".`;
        } else { // Array or LinkedList
            if (!gameStarted) {
                gameStatusMessageDisplay.textContent = `N值已更新为 ${gameNValue}. 点击 "开始游戏".`;
                return;
            }
            if (awaitingPlayerClick) {
                gameStatusMessageDisplay.textContent = `N值将在下次选择时更新为 ${gameNValue}.`;
            } else {
                gameStatusMessageDisplay.textContent = `N值已更新为 ${gameNValue}.`;
            }
        }
    });
    
    simulationModeRadios.forEach(radio => {
        radio.addEventListener('change', (event) => {
            // When mode changes, always re-initialize the game for that mode.
            // initializeGame will update the simulationMode variable and UI texts.
            initializeGame();
        });
    });

    // Initial setup on page load
    initializeGame();
    // initializeGame sets gameStarted to false and button text appropriately for the default mode.


    window.addEventListener('resize', () => {
        if (gameStarted && players.length > 0 && !awaitingPlayerClick && !giantPistolElement.classList.contains('visible')) {
             renderPlayers(); // Re-render on resize to adjust positions
             updateNextStartPlayerVisual();
        }
    });
});
    </script>
</body>
</html>
